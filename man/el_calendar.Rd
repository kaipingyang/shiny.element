% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/el_calendar.R
\name{el_calendar}
\alias{el_calendar}
\title{Element UI Calendar Component}
\usage{
el_calendar(
  id = NULL,
  value = NULL,
  range = NULL,
  first_day_of_week = 1,
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{id}{Calendar ID (auto-generated if NULL)}

\item{value}{Bound value (Date/string/number)}

\item{range}{Date range, c("YYYY-MM-DD", "YYYY-MM-DD")}

\item{first_day_of_week}{First day of week (1~7), default 1}

\item{session}{Shiny session for module support}
}
\description{
Create a calendar widget for Shiny using Element UI.
}
\examples{
# Basic usage
el_calendar(id = "calendar1", value = Sys.Date())

# With date range
el_calendar(id = "calendar2", range = c("2025-01-01", "2025-01-31"))

# Shiny app example: interactive calendar with update
if (interactive()) {
  library(shiny)
  library(shiny.element)
  ui <- el_page(
    titlePanel("Element UI Calendar Example"),
    sidebarLayout(
      sidebarPanel(
        actionButton("set_today", "Set to Today"),
        actionButton("set_tomorrow", "Set to Tomorrow"),
        hr(),
        verbatimTextOutput("selected_date")
      ),
      mainPanel(
        el_calendar(
          id = "my_calendar",
          value = Sys.Date(),
          first_day_of_week = 1
        )
      )
    )
  )
  server <- function(input, output, session) {
    output$selected_date <- renderPrint({
      input$my_calendar
    })
    observeEvent(input$set_today, {
      update_el_calendar(session, "my_calendar", value = Sys.Date())
    })
    observeEvent(input$set_tomorrow, {
      update_el_calendar(session, "my_calendar", value = Sys.Date() + 1)
    })
  }
  shinyApp(ui, server)
}
}
